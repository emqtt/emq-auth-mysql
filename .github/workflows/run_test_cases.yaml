name: Run test cases

on: [push, pull_request]

jobs:    
    run_test_cases:
        runs-on: ubuntu-latest
      
        strategy:
          matrix:
            mysql_tag:
              - 5.7
              - 8
            network_type:
              - ipv4
              - ipv6
            connect_type:
              - ssl
              - tcp

        steps:
            - name: install docker-compose
              run: | 
                sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
            - uses: actions/checkout@v1
            - name: run test cases
              env:
                MYSQL_TAG: ${{ matrix.mysql_tag }}
                NETWORK_TYPE: ${{ matrix.network_type }}
                CONNECT_TYPE: ${{ matrix.connect_type }}
              run: |
                if [ "$NETWORK_TYPE" = "ipv6" ];then docker network create --driver bridge --ipv6 --subnet fd15:555::/64  test_emqx_bridge --attachable; fi
                if [ "$CONNECT_TYPE" = "ssl" ]; then
                    docker-compose -f ./docker-compose-ssl.yml -p test up -d
                    docker exec -i $(docker ps -a -f name=test_erlang_1 -q) sh -c "sed -i '/auth.mysql.ssl = off/c auth.mysql.ssl = on' /emqx_auth_mysql/etc/emqx_auth_mysql.conf"
                    docker exec -i $(docker ps -a -f name=test_erlang_1 -q) sh -c "echo 'auth.mysql.ssl.cafile = /emqx_auth_mysql/test/emqx_auth_mysql_SUITE_data/ca.pem' >> /emqx_auth_mysql/etc/emqx_auth_mysql.conf"
                    docker exec -i $(docker ps -a -f name=test_erlang_1 -q) sh -c "echo 'auth.mysql.ssl.certfile = /emqx_auth_mysql/test/emqx_auth_mysql_SUITE_data/client-cert.pem' >> /emqx_auth_mysql/etc/emqx_auth_mysql.conf"
                    docker exec -i $(docker ps -a -f name=test_erlang_1 -q) sh -c "echo 'auth.mysql.ssl.keyfile = /emqx_auth_mysql/test/emqx_auth_mysql_SUITE_data/client-key.pem' >> /emqx_auth_mysql/etc/emqx_auth_mysql.conf"
                else
                    docker-compose -f ./docker-compose.yml -p test up -d
                fi
                docker exec -i $(docker ps -a -f name=test_erlang_1 -q) sh -c "echo 'auth.mysql.username = root' >> /emqx_auth_mysql/etc/emqx_auth_mysql.conf "
                docker exec -i $(docker ps -a -f name=test_erlang_1 -q) sh -c "echo 'auth.mysql.password = public' >> /emqx_auth_mysql/etc/emqx_auth_mysql.conf"
                if [ "$NETWORK_TYPE" != "ipv6" ];then
                    docker exec -i $(docker ps -a -f name=test_erlang_1 -q) sh -c "sed -i '/auth.mysql.server/c auth.mysql.server = mysql_server:3306' /emqx_auth_mysql/etc/emqx_auth_mysql.conf"
                else
                    ipv6_address=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.GlobalIPv6Address}}{{end}}' $(docker ps -a -f name=test_mysql_server_1 -q))
                    docker exec -i $(docker ps -a -f name=test_erlang_1 -q) sh -c "sed -i '/auth.mysql.server/c auth.mysql.server = $ipv6_address:3306' /emqx_auth_mysql/etc/emqx_auth_mysql.conf"
                fi
                docker exec -i $(docker ps -a -f name=test_erlang_1 -q) sh -c "make -C /emqx_auth_mysql xref"
                docker exec -i $(docker ps -a -f name=test_erlang_1 -q) sh -c "make -C /emqx_auth_mysql eunit"
                docker exec -i $(docker ps -a -f name=test_erlang_1 -q) sh -c "make -C /emqx_auth_mysql ct"
                docker exec -i $(docker ps -a -f name=test_erlang_1 -q) sh -c "make -C /emqx_auth_mysql cover"
            - uses: actions/upload-artifact@v1
              if: failure()
              with:
                name: logs_mysql${{ matrix.mysql_tag }}_${{ matrix.network_type }}
                path: _build/test/logs

